public ArrayList<Point[]> triangulation(ArrayList<Point> points){
		ArrayList<Point[]> triangles = new ArrayList<Point[]>();
		for(int i = 0; i < points.size(); i++) {
			for(int j = i+1; j < points.size(); j ++) {
				for(int k = j+1; k < points.size(); k ++) {
					boolean successfulTriangle = true;
					Point[] currentTriangle = {points.get(i), points.get(j), points.get(k)};
					for(int l = 0; l < points.size(); l ++) {
						if(i == l || j == l || k == l)
							continue;
						if(triangleContainsPoint(points.get(l), currentTriangle)) {
							successfulTriangle = false;
							break;
						}
					}
					if(successfulTriangle) {
						triangles.add(currentTriangle);
					}
				}
			}
		}
		
		return triangles;
	}
	
	public boolean triangleContainsPoint(Point p, Point[] vertices) {
		
		//Area of original triangle
		float areaOrig = triangleArea(vertices[0], vertices[1], vertices[2]);
		
		//Area of three new triangles
		float areaNew1 = triangleArea(p, vertices[0], vertices[1]);
		float areaNew2 = triangleArea(p, vertices[0], vertices[2]);
		float areaNew3 = triangleArea(p, vertices[1], vertices[2]);
		float sumNewAreas = areaNew1 + areaNew2 + areaNew3;
		
		if(abs(areaOrig-sumNewAreas) < 0.001)
			return true;
		
		return false;
	}
	
	public float triangleArea(Point p1, Point p2, Point p3) {
		float a, b, c, s;
		a = dist(p1.x, p1.y, p2.x, p2.y);
		b = dist(p1.x, p1.y, p3.x, p3.y);
		c = dist(p2.x, p2.y, p3.x, p3.y);
		s = (a+b+c)/2;
		return sqrt(s * (s-a) * (s-b) * (s-c));
	}
